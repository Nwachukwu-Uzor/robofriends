{"version":3,"sources":["CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","searchfield","onSearchChange","event","target","value","fetch","then","response","json","filteredRobots","filter","robot","name","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAwBeA,EArBE,SAAC,GAAgB,EAAdC,OAEd,MAAM,IAAIC,MAAM,YCUPC,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAClB,OACG,yBAAKC,UAAU,QACZ,2BACGA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCDPK,EANA,SAACC,GAAD,OACZ,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,MACjEJ,EAAMK,WCgBEC,E,4MAjBZC,MAAQ,CACLC,UAAU,G,gEAGKC,EAAOC,GACtBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAOG,KAAKJ,MAAMC,SAElB,uDAEAG,KAAKX,MAAMK,a,GAdWQ,aC2CbC,G,kNArCZP,MAAQ,CACLhB,OAAQ,GACRwB,YAAa,I,EAShBC,eAAiB,SAACC,GACf,EAAKL,SAAS,CAACG,YAAaE,EAAMC,OAAOC,S,kEAPvB,IAAD,OACjBC,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA9B,GAAM,OAAI,EAAKqB,SAAS,CAACrB,gB,+BAOvB,IAAD,EACyBoB,KAAKJ,MAA7BhB,EADD,EACCA,OAAQwB,EADT,EACSA,YACVS,EAAiBjC,EAAOkC,QAAO,SAAAC,GAAK,OACvCA,EAAMC,KAAKC,cAAcC,SAASd,EAAYa,kBAGjD,OAAQrC,EAAOuC,OAIZ,yBAAKnC,UAAU,MACZ,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAciB,KAAKK,iBAC9B,kBAAC,EAAD,KACG,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAUzB,OAAQiC,OAP3B,wBAAI7B,UAAU,SAAd,UAA6B,0BAAMA,UAAU,0BAAhB,Y,GAxBpBkB,cCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACN,6BACG,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.6f6aa768.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from './components/Card';\r\n\r\nconst CardList = ({ robots })  => {\r\n   if (true) {\r\n      throw new Error('NOOOOO ')\r\n   }\r\n   return (\r\n      <div>\r\n         { robots.map(robot => \r\n            <Card \r\n               key={robot.id} \r\n               id={robot.id} \r\n               name={robot.name} \r\n               username={robot.username} \r\n               email={robot.email} \r\n               address={robot.address.street}\r\n               website={`www.${robot.website}`}\r\n            />\r\n         )}\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n   return (\r\n      <div className=\"pa2 \">\r\n         <input\r\n            className=\"pa3 ba b--green bg-lightest-blue\" \r\n            type=\"search\" \r\n            placeholder=\"search robots\"\r\n            onChange={searchChange}\r\n         />\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => (\r\n   <div style={{overflowY: 'scroll', border: '1px solid black', height: 1000}}>\r\n      {props.children}\r\n   </div>\r\n)\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n   state = {\r\n      hasError: false\r\n   }\r\n\r\n   componentDidCatch(error, info) {\r\n      this.setState({hasError: true})\r\n   }\r\n\r\n   render() {\r\n      return this.state.hasError\r\n      ?\r\n      <h1>Ooops! that is not good</h1>\r\n      :\r\n      this.props.children\r\n   }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n   state = {\r\n      robots: [],\r\n      searchfield: ''\r\n   }\r\n\r\n   componentDidMount() {\r\n      fetch('http://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(robots => this.setState({robots}))\r\n   }\r\n\r\n   onSearchChange = (event) => {\r\n      this.setState({searchfield: event.target.value});\r\n   }\r\n\r\n   render () {\r\n      const { robots, searchfield } = this.state;\r\n      const filteredRobots = robots.filter(robot =>\r\n         robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n      )\r\n\r\n      return !robots.length \r\n         ?\r\n         <h1 className='f1 tc'>Loading<span className='f-subheadline lh-title'>...</span></h1>\r\n         :\r\n         <div className=\"tc\">\r\n            <h1 className='f1'>RoboFriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n               <ErrorBoundary>\r\n                  <CardList robots={filteredRobots}/>\r\n               </ErrorBoundary> \r\n            </Scroll>\r\n         </div>  \r\n   }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n   <div>\n      <App />\n   </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}